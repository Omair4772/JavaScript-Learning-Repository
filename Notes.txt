 
 
<!-- Day 1 -->

######################################### BASICS ###############################################

# environment setup
# learned How to print a statement
# learned some github online work that how its work.
# console.log("Omair Ahmad Khalil")   

// shortcut for console.log is just type log and then enter the suggestion
for checking js intalled or not just type (node -v) in the terminal
for Output we use (node Basic_1\test.js)

console.table([account_email, account_password, account_city, account_state]);
// for printing more then oneline you can print it by using console.table() METHOD



<!-- Day 2 -->



######################################### LEARING ABOUT VARIABLES ###############################################

# const accountId = "11223344" // value will be assigned one time /  for unchangable values use const method
# let account_email = "omair@git.com" // let is the new way for initializing the variable and its bugs free
# var account_password = "111111"     // var is the old way for initializing  variables. it has some issues with the like scoping the variables (scope is {} ) so developer decides to use let method
# account_city = "peshawar"   // javascript can also initialize variables without adding the var/let before but we don't prefer it.

// Updating Above variables 
# accountId = "1111"    // This is not allowed because account_Id is a CONST variable
# account_password = "23234" //This is Ok because this is Not a CONST variable

# DATATYPES AND ECMA
# "Use strict"; // This Allows the compiler to treat all the javaScript code as a newer version
# ECMA is a website for writting a standerd of codes it gives us the rules to follow that

# OBJECT

# console.log(typeof loggin); // Typeof is used for to find a type of the variable
//null is a object // undefine is a undefine typeof





<!-- Day 3 -->




######################################### CONVERSION & OPERATIONS ###############################################

######################################### CONVERSION ###############################################

// WHEN  WE WANT TO CONVERT ONE VARIABLE OPERATION INTO ANOTHER

# let SInNumber = Number(Stringscore);
// IF WE WANT ANOTHER TYPE FOR CONVERSION INTEAD OF NUMBER WE NEED TO TYPE ITS NAME JUST LIKE STRING(SCORE) BOOLEAN(SCRORE) ETC

// THERE ARE SOME ISSUES WITH JS IN TYPE CHECKING IT WILL CONVERT ANYTHING IN NUMBERS BUT THE RESULT WILL BE INCURRECT

// OUTPUT
console.table([VarInNumber,SInNumber,BInNumber]);

//
THE OUTPUT FOR SCORE AFTER CONVERSION IS 33
THE OUTPUT FOR STRINGSCORE AFTER CONVERSION IS NaN
THE OUTPUT FOR BOOLSCORE AFTER CONVERSION IS 1

FOR BOOLEAN CONVERSION IF WE CONVERT THEN 1 = TRUE / 0 = FALSE // EMPTY STRING = FALSE, VALUABLE STRING = TRUE 
//

######################################### OPERATIONS ###############################################

# let value = 2
  let negitiveValue = -value

// console.log(negitiveValue);


                        // Basic
// console.log(2+2);
// console.log(2-2);
// console.log(2*2);
// console.log(2**2); //2 power 2
// console.log(2/2);
// console.log(2%2);
// let string3 = str1 + str2    // Output  (STR1 Value STR2 value)

console.log("2" + 2);           // 22
console.log(2 + "2");           // 22
console.log(2 + 2 + "2");       // 42
console.log("2" + 2 + 2);       // 222
console.log("2" + (2 + 2));     //  24    // () IT WILL FIRST adding the inside the brackets value

// PROTIP 
USE parenthesis FOR NOT A MESSY NOT


// console.log(+TRUE)       OUTPUT 1
// console.log(+"")         OUTPUT 0


num1 = num2 = num3 = 2 + 2          // it will add 2+2 TO NUM1 NUM2 NUM3
 // prefix = ++gamecounter and postfix = gamecounter++


// ######################################### COMPARISON ###############################################

                    // BASIC

// console.log(2>1);
// console.log(2>3);

//                     // ADVANCE
//  console.log("2" > 2);     // false
//  console.log("2" < 2);     // false
//  console.log("2" == 2);    // true

//  console.log(null > 0);                  //these are the confusion conversions avoid this as you can 
//  console.log(null == 0);     
//  console.log(null >= 0);     // confusion is here      null is not greater or equals to 0 but last statment give true output   


//  console.log(undefined > 0);
//  console.log(undefined< 0);
//  console.log(undefined == 0);             // every answer is false


# //strick check (===)                these === check will also check the type is same or not if not then it will give an error
// console.log("2" === 2);         // Answer will be false



<!-- Day 4 -->


// ######################################### Stack and heap ###############################################

// we have to two types of memories 1 is stack type and the other is Heap.
//stack is used in primitive data types
//heap is used in NonPrimitive data types


stack 

myName = omair 
myName2 = myName

myName2 = Ahmad 
                  it will only change the myName2 value and the myName value will remain the same because
                  when we assign the myName to myName2 it assigning the copy of the the Myname variable so
                  when you change the value of myName2 it will change in that copied variable

console log will be 

myName = omair 
myName2 = Ahmad

//////////////////////////////////////// Heap ////////////////////////////////////////////////////////////////

const Myname ={
  name: "Omair",
} 
const myName2 = Myname
myName2.name = Ahmad 
                      it will change the both variable values of myName and myName2 because when we assign
                      the myName to the myName2 it giving the reference of myName values to the myName2 
                      but when we change the value of myName2.name which is accutally a reference of both 
                      it will change the value on both variables
console.log will be 

myName = Ahmad 
myName2 = Ahmad



//////////////////////////////////////// Strings ////////////////////////////////////////////////////////////////

//Basic
"Hello" + "World" 
// print will be Hello World

const name = "omair"
const repoCount = "20"
//console.log(name + repoCount +" this is it"); // not a best way instead you can type
// console.log(`Hello this is best way ${name} and this is repo count ${repoCount}`);

const myName = new String('OMAIR')
console.log(myName[1]); // you can print specific value from the same string
console.log(myName.length); // finding length
console.log(myName.__proto__); // type of 
console.log(myName.charAt(4)); // in the index which char is placed
console.log(myName.toLowerCase()); // in Lower case
console.log(myName.toLocaleUpperCase()); // in UpperCase
console.log(myName.indexOf("R")); // Finding index of char
// many more functions.. we can see in web browser console


//////////////////////////////////////// Nums And maths ////////////////////////////////////////////////////////////////

////////////////////////////////////// NUMS ////////////////////////////////////

const score = 300 // can be string, number or any other
const balance = new Number(200) // 100% will be the number

console.log(score, balance);
//you can convert it to string some more also find its length like that
console.log(balance.toString().length); 

// getting values in float
console.log(balance.toFixed(2));

//GETTING PRECISED VALUE
const numberIs = 232.651 
// above .5 will consider as above number like 2.6 will be 3 and 2.4 will be 2
console.log(numberIs.toPrecision(4))

const numberForReadability = 100000000
// makes it readable on adding some commas
// DOING IT ACCORDING COUNTRY
console.log(numberForReadability.toLocaleString('en-IN')); 


/////////////////////////////////////////// MATHS /////////////////////////////////




// // console.log(Math);
// // console.log(Math.abs(-4));  // absolute value ... negitive to positive
// // console.log(Math.round(4.6)); //if 4.4 then will be 4 if 4.6 then 5
// // console.log(Math.ceil(4.01)); // even if 4.01 it will consider as 5
// // console.log(Math.floor(4.99)); // if 4.99 it will consider as 4
// // console.log(Math.min(1,10)); // get minimum value in given numbers
// // console.log(Math.max(1,10)); // get maximum value in given numbers

// get random value btw 0 to 1
// // console.log(Math.random()); 

// const min = 10
// const max = 100

// get random value btw min to max
// console.log(Math.ceil(Math.random()* (max - min + 1 ))+ min); 



<!-- Day 5 -->


/////////////////////////////////////////// DATES IN JS /////////////////////////////////


let myDate = new Date()
// basic but messy 
// it will print dates according to the country 
//and also not giving you just numbers but in alphaNumeric format like (wed sept 2, 2025)

// console.log(typeof myDate); // object
// console.log(myDate); // 2025-09-03T04:11:01.825Z
// console.log(myDate.toString());// Wed Sep 03 2025 09:11:31 GMT+0500 (Pakistan Standard Time)
// console.log(myDate.toDateString()); // Wed Sep 03 2025
// console.log(myDate.toISOString()); // 2025-09-03T04:14:55.078Z
// console.log(myDate.toJSON()); // 2025-09-03T04:11:01.825Z 
// console.log(myDate.toLocaleString()); // 9/3/2025, 9:14:55 AM
// console.log(myDate.toLocaleTimeString()); // 9:11:31 AM
// console.log(myDate.toLocaleDateString()); // 23/2/2025
// console.log(myDate.toUTCString()); // Wed, 03 Sep 2025 04:11:01 GMT


// dates start from 0 .. works like index
//let myNewDate = new Date(2022,0,10) // printing specific date 
// let myNewDate = new Date(2022,0,10,3,4,50) // printing specific date and time 
//let myNewDate = new Date("12-22-2025") // printing specific Format 
//console.log(myNewDate.toLocaleString()); 
//console.log(myDate.getDay());// more to go //// getting day only 

// let myTime = Date.now() // TimeStemp
// console.log(myDate.getTime()); // 1756874386028
// // giving a long milisecond value from the date and time create in js 1,Jan,1970 
// console.log(Math.floor(myDate.getTime()/1000)); // converting to seconds


// // CUSTOMIZING SOME DATE format 
// let myCustomizedDate = myDate.toLocaleString('default',{
//     weekday: "long",
//     year: '2-digit'
// })
// console.log(myCustomizedDate);



/////////////////////////////////////////// Array IN JS /////////////////////////////////


//array
// arrays are objects
// const myArray = [0,1,2,3,4,5,6,7]
// const my2Array = new Array(9,3,4,6,8,5,7)
// const myNames = ["Omair","Ahmad","Khalil"]

// console.log(my2Array)
// console.log(my2Array.length)
// console.log(myArray[1],my2Array[3],myNames[2]);

// Methods

// my2Array.unshift(23) // adding something to array start
// my2Array.shift() // removed that added value of the unshift in array
// my2Array.push(99)  // adding something to array end
// my2Array.pop() // deleting last array index
// //console.log(my2Array.includes(2)); // Asking something
// console.log(my2Array.indexOf(6)); // Asking index of
// const myNewArr = my2Array.join() // Adding one array to another Variable as a String
//console.log(myNewArr);


// SLICE AND SPLICE

//slice
//Copies elements from index 0 to 3 (end index is exclusive).
//Doesn’t change the original array.

//splice
//Removes elements from the original array, starting at index 0, removing 4 elements.
//Returns those removed elements.

// const arr = [22,34,67,5,3,2]
// console.log("A ", arr);

// const sliceArr = arr.slice(0,3)

// console.log("Slice ", sliceArr);
// console.log(" B ", arr);

// const spliceArr = arr.splice(0,4)
// console.log("Splice ", spliceArr);

// console.log(" c ", arr);


//  const array1 = ["Omair","Ahmad","Khalil"]
//  const array2 = ["Omair2","Ahmad2","Khalil2"]

// Neasted Array
// array1.push(array2) 
// console.log(array1[3][0]);

// Adding two array in new Array
// const newArray = array1.concat(array2)
// console.log(newArray);

//Spread Operator works the same
//const myNewArrayIs = [...array1,...array2] // working the same way of concat but easy this is the easy method and also you can add multiple arrays inside but in concat you can only add one
//console.log(myNewArrayIs);

// neasted neasted array in one single array 
// const thearray = [1,2, [3,4],5,6,[7,8,[9,10],11],12]
// const singleArray = thearray.flat(Infinity) // FLAT  used to get all neasted array in one you can tell it how much in depth it will go by adding number in flat(This place)
// // console.log(singleArray);

// console.log(Array.isArray("Omair")) //False ASKING if its array
// console.log(Array.from("Omair")) //converts every array into alphabit by alphabit

// let score1 = 10
// let score2 = 20
// let score3 = 30
// console.log(Array.of("Omair", score1,score2,score3)) // make it single Array

//console.log(Array.from(Object.values({name:"omair",rollNumber:"222"}))); //telling the values as will otherwise it will get empty array



//////////////////////////////////////////////////////// OBJECTS //////////////////////////////////////////////////

 


// declearing object is 2 ways 1st is literal 2nd is constructer

//here is one concept called Singleton 
// singleton are when we declear it from literals it will not make it singleton and 
// WHEN it declear from the constructor it will be a singleton object

//object
// const  mySym = Symbol("key1")
// const jsUser = {
//     name: "Omair",
//     [mySym]: "22", // taking Symbol as a key 
//     location: "Peshawar",
//     email: "omair@gmail.com",
//     isLoggedIn: false
// }

// jsUser.email = "omairahmad@gmail.com"
// //Object.freeze(jsUser) // it will freeze the object not editable 

// // console.log(jsUser.name);    // bad practice 
// // console.log(jsUser["email"]); // we add index as a string because objects keys are acctually a string values
// // console.log(jsUser[mySym]); // we add index as a string because objects keys are acctually a string values


// // Object Literals
// jsUser.Greeting = function(){
//     console.log("Dear User");
// }

// jsUser.Greeting2 = function(){
//     // This is referene of this function.... connected to this function will be access here
//     console.log(`Hello dear User ${this.name},${this.email}`);
// }
// console.log(jsUser.Greeting(),jsUser.Greeting2());

// Non Literals
// const UserData = {}

//  UserData.id = "123"
//  UserData.name = "Omair" 
//  UserData.isLoggedIn = false 

// console.log(UserData);

// const regualUser = {
//     email: "Omair@gmail.com",
//     FullName:{
//         complete:
//         {
//             firstName: "Omair",
//             lastName:"Ahmad"
//         }
//     }
// }
// // console.log(regualUser.FullName.complete.firstName); // access neasted values

// const obj1 = {1:"A", 2:"B"}
// const obj2 = {3:"C", 4:"D"}

// //const obj3 = {obj1,obj2} // wrong it will get object inside object
// //for combining 
// // {} is target and obj1,obj2 are the sources 
// const obj3 = Object.assign({},obj1,obj2) // {} optional but it confirm it will added like singnle
// const obj4 = {...obj1, ...obj2} // easy spread method
// console.log(obj4)

// Mostly use in getting Data from the DataBases ... which gives data in Arrays

// console.log(UserData);
// // getting keys and values of the object for iteration or other needs
// console.log(Object.keys(UserData));
// console.log(Object.values(UserData));
// console.log(Object.entries(UserData)); // making every key with values in seperate array
// console.log(UserData.hasOwnProperty('name')); // Searching something in objects


// const course = {
//     courseName: "Omair",
//     price: "999"
// }
// // console.log(course.courseName);
// const {courseName: nameIs} = course // can rename accordingly
// // console.log(courseName);
// console.log(nameIs);




////////////////////////////////////////////////// JSON API //////////////////////////


// JSON API

// {
//     "Name": "Omair",  // Keys and values will be in string format
//     "Id": "123",
//     "isActive": "false"
// }

// [
//     {}, // Sometimes we will get data in Arrays like this
//     {},
//     {}
// ]


////////////////////////////////////////////////// Functions ///////////////////////////

function sayMyName() 
// {
//     console.log("O");
//     console.log("m");
//     console.log("a");
//     console.log("i");
//     console.log("r");
// }
// sayMyName() <= execution
// sayMyName <=  reference
// sayMyName()

// function addNumbers (num1,num2){
//     console.log(num1 + num2); 
// }
// //getting problem if you give not a number value
// addNumbers(2,9) // aslo getting problem while adding its values in anoher variables 

//  function addNumbers (num1,num2){
//     let result = num1 + num2
//     return result
//     // return num1 + num2 // Another way .. also saving space for not declearing variable
//     console.log("HYE"); // unreachble code because of return
//  }

// const result = addNumbers(22,44)
// //console.log("Result: ", result);

// function userLoggedIn (username){ // also default value can be like username = "Omair"
//     if(!username){
//         console.log("Please Enter Your Name!");
//         return
//     }
//     return `${username} Just Logged In`
// }
// console.log(userLoggedIn("Omair"));

//////////////////////////////////////////// PART 2 /////////////////////////////////////////////


// function
// function sayMyName() 
// {
//     console.log("O");
//     console.log("m");
//     console.log("a");
//     console.log("i");
//     console.log("r");
// }
// sayMyName() <= execution
// sayMyName <=  reference
// sayMyName()

// function addNumbers (num1,num2){
//     console.log(num1 + num2); 
// }
// //getting problem if you give not a number value
// addNumbers(2,9) // aslo getting problem while adding its values in anoher variables 

//  function addNumbers (num1,num2){
//     let result = num1 + num2
//     return result
//     // return num1 + num2 // Another way .. also saving space for not declearing variable
//     console.log("HYE"); // unreachble code because of return
//  }

// const result = addNumbers(22,44)
// //console.log("Result: ", result);

// function userLoggedIn (username){ // also default value can be like username = "Omair"
//     if(!username){
//         console.log("Please Enter Your Name!");
//         return
//     }
//     return `${username} Just Logged In`
// }
// console.log(userLoggedIn("Omair"));


// What if you don't know how many parametters will come from the user 
// rest operator is the solution

// function parametter(num,...num1) // its a spread operator but its also called rest operator depends functionality on usecase
// {
//     console.log(typeof num1);
//     console.log(num);
//     return num1

// }
// // rest operator will take all the values in object form
//console.log(parametter(100,1122,33, "cham cham")); 


// how to pass object into function
// //object
// const user = {
//     username: " Omair",
//     id: 123
// }
// function ObjectHandler(anyObject){
//     console.log(`userName is ${anyObject.username} and price is ${anyObject.id}`);
// }
// ObjectHandler(user)

// //how to pass arrays into function
// const myarray = [11,2,34,5,6,7]

// function myarrayFunction(getarray){
//     return getarray[4]
// }
// console.log(myarrayFunction(myarray));

/////////////////////////////////////////////// Scopes ///////////////////////////////////////////////////

// Scopes

//  {} <= scopes.. which means that variables inside these parameters will be only access inside the Parameters you can't access it from inside

// example

// if(true){

//     const a = 11
//     console.log(a) // a can be access here but not outside the if statment
// }
// //console.log(a); // not accessble and giving you an error
// // so a is a local variable of if statment ...
// //  you can create another a variable outside the if statment it will consider as new variable
// //  and will not give you an error of dublicate variable.
// // DON't use VAR variable because it has a scoping issues .. you can use const and let insead

// const a = 22 // just like this 

// console.log(a) // <=


/////////////////////// Hositing ///////////////////////

// console.log(add(2));
// // in that way of creating a function you can access add function before it created 
// function add(num){
//     return num + 1
// }
// // console.log(sub(3)) // giving you error
// //because you can't access before declearing a function like this 
// const sub = function(num){
//     return num - 2
// }
// // console.log(sub(3)) // you can access it here



// hoisting .......  INTERSETED

// console.log(add(2));
// // in that way of creating a function you can access add function before it created 
// function add(num){
//     return num + 1
// }
// // console.log(sub(3)) // giving you error
// //because you can't access before declearing a function like this 
// const sub = function(num){
//     return num - 2
// }
// // console.log(sub(3)) // you can access it here



//////////////////////////////////////// IIFE /////////////////////////////////////////////////



// Immediately Invoked Function Expressions (IIFE)

// // () ()  first one is for function and the secund one is for execution
// //()() is used for removing the globle scope pollution 
// (function chai(){
//     // this type of IIFE called Named IIFE
//     console.log("Chai Is Ready")
// }) (); // use semicollon for ending the IIFE

// // also can be for giving arguments also
// ((name) => {
//     // this type of IIFE called UnNamed IIFE
//     console.log(`Chai Is Ready ${name}`)
// }) ('Omair'); // use 2nd one as like a function which takes the parametters



<!-- Day 6 -->



/////////////////////////////////////////////CONDITIONS AND ITERATIONS /////////////////////////////////////////////////////

// Control flow or logice flow 

// when you desides that which code should run at which time
//if statment comparison  true, false ,( <= , ==,===(also check type), >=, <,>), &&, ||(OR) !=(Not Equals)
//if else statment.... if(true){}else{}
// else if statment.... if(true){}else if(false){}else{}
// OR Statment if(userLoggedIn || dabitCard){}
// And Statment if(userLoggedIn && dabitCard){}

// Switch

// switch (key) {
//     case value:
        
//         break;

//     default:
//         break;
// }
// const month = "Jan" // 3
// switch (month) {
//     case "Jan":
//         console.log("Month is Jan");
//         break;
//     // case 4:
//     //     console.log("Month is April");
//     //     break;
//      default:
//         break;
// }


// Truthy Value and Falsy Values

// Falsy Values Are
//false, 0, !true, -0, BigInt 0n, "", null, undefined, NaN

// Truthy Values
// true, !false ,"Something in string", [] Empty Array, {} empty objects, functions(){}, false == 0, false == "", 0 == ""

// nullish Coalescing Operator (??): null, undefined
// let val1
//val1 = 5 ?? 10 // answer will be 5
//val1 = null ?? 10 // Answer will be 10
//val1 = undefined ?? 20 // Answer will be 20
// val1 = null ?? 20 ?? 30 // answer will be 20
// console.log(val1);

// Terniary Operator
//condition ? true : false // works like if else
// const price = 100
// price <= 80 ? console.log("Less then 80") : console.log("More Then 80");




// LOOPS




// Loops

// for loops
// for (let i = 1; i <= 10; i++) {
//     const element = i;
//     console.log(element);   
// }

//Neasted For // Printing Tables
// for (let i = 1; i <= 3; i++) {
//    console.log("TABLE : ", i)
//     for (let j = 1; j <= 10; j++) {
//         console.log(`${i} * ${j} = ${i * j}`);
//     }
// }

// // break and continue
// for (let index = 1; index <= 20; index++) {
//     if (index === 5) {
//         console.log("5 Number Detected");
//       //  break
//         continue
//     }    
//     console.log(`VALUES ARE ${index}`);
    
// }

// while loop
// let i = 1
// while (i <= 5) {
//     console.log(`VALUE IS : ${i}`);
    
//     i++ // i+2 will increament + 2
// }

// while on array 

// const myarray = ["Omair", "Ahmad", "Khalil"]
// let i = 0
// while(i < myarray.length){
//     console.log(`MY ARRAY CONTAINS ${myarray[i]}`);
//     i++
// }

// do while
// let score = 1
// do {
//     console.log(`SCORE IS : ${score}`);
//     score++
// } while (score <= 5);

//["","",""] // array
//[{},{},{}] // can take objects 

// for of loop 
// const myarr = [1,2,3,4,5]
// for (const num of myarr) // num of object(means on which object you want to add loop) you can give string objects, arrays
// { 
//     console.log(num);    
// }

// for in loop 
// Also use for getting keys and values from Object we discuss this in line 93
// const myobject = {
//     name: "omair",
//     id: "123"
// }
// for (const key in myobject) {
//     if (Object.prototype.hasOwnProperty.call(myobject, key)) {
//         const element = myobject[key];
//         console.log(element);  
//     }
// }

// MAPS
// map is used for unique data storing like dublicate data can't be stored 
// also map remember your order of data 

// // map declearation
// const map = new Map()
// // data insertion
// map.set('Pk', "Pakistan")
// map.set('FR', "France")
// map.set('CA', "Canada")
// // console.log(map);

// // making array desructure to get keys and values separatly 
// for (const [key, value] of map) {
//     console.log(key,':-', value);
// }

// Getting object
// const myObj = {
//     js: "Javascript",
//     cpp: "C++",
//     rb: "Ruby",
//     swift: "Swift by Apple"
// }

// for (const key in myObj) {
//     console.log(`KEY: ${key} VALUE:  ${myObj[key]}`);
    
// }

// Is for in loop works with Array ?

// const programming = ["france","china","pakistan","UK","US"]

// for (const key in programming) {
//     //console.log(key)// it prints keys of array which is Numbers 0 to infinty
//     //how to get values and keys?
//     console.log(`keys: ${key} Value: ${programming[key]}`);
// }

// can we apply for in loop on Map ?

// const map = new Map()
// map.set('Pk', "Pakistan")
// map.set('FR', "France")
// map.set('CA', "Canada")

// for (const key in map) {
//    console.log(key); // Nothing to print 
//    //but how to ? we will discuss it
// }


// FOR EACH LOOP

// const array =["Hey","Omair"]

// array.forEach(
//     function (item) {
//         console.log(item);
        
//     }
// )

// array.forEach(element => {
//     console.log(element);
// });

// you can access its item + index + whole Array

// array.forEach((item, index, array)=>{
//     console.log(item, index, array);
// })

// objects in array get in for Each Loop

// const myarray = [

//     {
//         city: "Peshawar" ,
//         language: "Pushto"
//     },
//     {
//         city: "Lahore",
//         language: " Punjabi"
//     },
//     {
//         city: "Karachi",
//         language: " Punjabi"
//     }
// ]
// myarray.forEach((item) =>{

//     console.log(`${item.language} Is spoken in ${item.city}`); 
// }
// )


////////////////////////////////////////////////////////////////////////////////////////////////





<!-- Day 7 -->


