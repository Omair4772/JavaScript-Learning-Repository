 
 
<!-- Day 1 -->

######################################### BASICS ###############################################

# environment setup
# learned How to print a statement
# learned some github online work that how its work.
# console.log("Omair Ahmad Khalil")   

// shortcut for console.log is just type log and then enter the suggestion
for checking js intalled or not just type (node -v) in the terminal
for Output we use (node Basic_1\test.js)

console.table([account_email, account_password, account_city, account_state]);
// for printing more then oneline you can print it by using console.table() METHOD



<!-- Day 2 -->



######################################### LEARING ABOUT VARIABLES ###############################################

# const accountId = "11223344" // value will be assigned one time /  for unchangable values use const method
# let account_email = "omair@git.com" // let is the new way for initializing the variable and its bugs free
# var account_password = "111111"     // var is the old way for initializing  variables. it has some issues with the like scoping the variables (scope is {} ) so developer decides to use let method
# account_city = "peshawar"   // javascript can also initialize variables without adding the var/let before but we don't prefer it.

// Updating Above variables 
# accountId = "1111"    // This is not allowed because account_Id is a CONST variable
# account_password = "23234" //This is Ok because this is Not a CONST variable

# DATATYPES AND ECMA
# "Use strict"; // This Allows the compiler to treat all the javaScript code as a newer version
# ECMA is a website for writting a standerd of codes it gives us the rules to follow that

# OBJECT

# console.log(typeof loggin); // Typeof is used for to find a type of the variable
//null is a object // undefine is a undefine typeof





<!-- Day 3 -->




######################################### CONVERSION & OPERATIONS ###############################################

######################################### CONVERSION ###############################################

// WHEN  WE WANT TO CONVERT ONE VARIABLE OPERATION INTO ANOTHER

# let SInNumber = Number(Stringscore);
// IF WE WANT ANOTHER TYPE FOR CONVERSION INTEAD OF NUMBER WE NEED TO TYPE ITS NAME JUST LIKE STRING(SCORE) BOOLEAN(SCRORE) ETC

// THERE ARE SOME ISSUES WITH JS IN TYPE CHECKING IT WILL CONVERT ANYTHING IN NUMBERS BUT THE RESULT WILL BE INCURRECT

// OUTPUT
console.table([VarInNumber,SInNumber,BInNumber]);

//
THE OUTPUT FOR SCORE AFTER CONVERSION IS 33
THE OUTPUT FOR STRINGSCORE AFTER CONVERSION IS NaN
THE OUTPUT FOR BOOLSCORE AFTER CONVERSION IS 1

FOR BOOLEAN CONVERSION IF WE CONVERT THEN 1 = TRUE / 0 = FALSE // EMPTY STRING = FALSE, VALUABLE STRING = TRUE 
//

######################################### OPERATIONS ###############################################

# let value = 2
  let negitiveValue = -value

// console.log(negitiveValue);


                        // Basic
// console.log(2+2);
// console.log(2-2);
// console.log(2*2);
// console.log(2**2); //2 power 2
// console.log(2/2);
// console.log(2%2);
// let string3 = str1 + str2    // Output  (STR1 Value STR2 value)

console.log("2" + 2);           // 22
console.log(2 + "2");           // 22
console.log(2 + 2 + "2");       // 42
console.log("2" + 2 + 2);       // 222
console.log("2" + (2 + 2));     //  24    // () IT WILL FIRST adding the inside the brackets value

// PROTIP 
USE parenthesis FOR NOT A MESSY NOT


// console.log(+TRUE)       OUTPUT 1
// console.log(+"")         OUTPUT 0


num1 = num2 = num3 = 2 + 2          // it will add 2+2 TO NUM1 NUM2 NUM3
 // prefix = ++gamecounter and postfix = gamecounter++


// ######################################### COMPARISON ###############################################

                    // BASIC

// console.log(2>1);
// console.log(2>3);

//                     // ADVANCE
//  console.log("2" > 2);     // false
//  console.log("2" < 2);     // false
//  console.log("2" == 2);    // true

//  console.log(null > 0);                  //these are the confusion conversions avoid this as you can 
//  console.log(null == 0);     
//  console.log(null >= 0);     // confusion is here      null is not greater or equals to 0 but last statment give true output   


//  console.log(undefined > 0);
//  console.log(undefined< 0);
//  console.log(undefined == 0);             // every answer is false


# //strick check (===)                these === check will also check the type is same or not if not then it will give an error
// console.log("2" === 2);         // Answer will be false



<!-- Day 4 -->


// ######################################### Stack and heap ###############################################

// we have to two types of memories 1 is stack type and the other is Heap.
//stack is used in primitive data types
//heap is used in NonPrimitive data types


stack 

myName = omair 
myName2 = myName

myName2 = Ahmad 
                  it will only change the myName2 value and the myName value will remain the same because
                  when we assign the myName to myName2 it assigning the copy of the the Myname variable so
                  when you change the value of myName2 it will change in that copied variable

console log will be 

myName = omair 
myName2 = Ahmad

//////////////////////////////////////// Heap ////////////////////////////////////////////////////////////////

const Myname ={
  name: "Omair",
} 
const myName2 = Myname
myName2.name = Ahmad 
                      it will change the both variable values of myName and myName2 because when we assign
                      the myName to the myName2 it giving the reference of myName values to the myName2 
                      but when we change the value of myName2.name which is accutally a reference of both 
                      it will change the value on both variables
console.log will be 

myName = Ahmad 
myName2 = Ahmad



//////////////////////////////////////// Strings ////////////////////////////////////////////////////////////////

//Basic
"Hello" + "World" 
// print will be Hello World

const name = "omair"
const repoCount = "20"
//console.log(name + repoCount +" this is it"); // not a best way instead you can type
// console.log(`Hello this is best way ${name} and this is repo count ${repoCount}`);

const myName = new String('OMAIR')
console.log(myName[1]); // you can print specific value from the same string
console.log(myName.length); // finding length
console.log(myName.__proto__); // type of 
console.log(myName.charAt(4)); // in the index which char is placed
console.log(myName.toLowerCase()); // in Lower case
console.log(myName.toLocaleUpperCase()); // in UpperCase
console.log(myName.indexOf("R")); // Finding index of char
// many more functions.. we can see in web browser console


//////////////////////////////////////// Nums And maths ////////////////////////////////////////////////////////////////

////////////////////////////////////// NUMS ////////////////////////////////////

const score = 300 // can be string, number or any other
const balance = new Number(200) // 100% will be the number

console.log(score, balance);
//you can convert it to string some more also find its length like that
console.log(balance.toString().length); 

// getting values in float
console.log(balance.toFixed(2));

//GETTING PRECISED VALUE
const numberIs = 232.651 
// above .5 will consider as above number like 2.6 will be 3 and 2.4 will be 2
console.log(numberIs.toPrecision(4))

const numberForReadability = 100000000
// makes it readable on adding some commas
// DOING IT ACCORDING COUNTRY
console.log(numberForReadability.toLocaleString('en-IN')); 


/////////////////////////////////////////// MATHS /////////////////////////////////




// // console.log(Math);
// // console.log(Math.abs(-4));  // absolute value ... negitive to positive
// // console.log(Math.round(4.6)); //if 4.4 then will be 4 if 4.6 then 5
// // console.log(Math.ceil(4.01)); // even if 4.01 it will consider as 5
// // console.log(Math.floor(4.99)); // if 4.99 it will consider as 4
// // console.log(Math.min(1,10)); // get minimum value in given numbers
// // console.log(Math.max(1,10)); // get maximum value in given numbers

// get random value btw 0 to 1
// // console.log(Math.random()); 

// const min = 10
// const max = 100

// get random value btw min to max
// console.log(Math.ceil(Math.random()* (max - min + 1 ))+ min); 



<!-- Day 5 -->