 
 
<!-- Day 1 -->

######################################### BASICS ###############################################

# environment setup
# learned How to print a statement
# learned some github online work that how its work.
# console.log("Omair Ahmad Khalil")   

// shortcut for console.log is just type log and then enter the suggestion
for checking js intalled or not just type (node -v) in the terminal
for Output we use (node Basic_1\test.js)

console.table([account_email, account_password, account_city, account_state]);
// for printing more then oneline you can print it by using console.table() METHOD



<!-- Day 2 -->



######################################### LEARING ABOUT VARIABLES ###############################################

# const accountId = "11223344" // value will be assigned one time /  for unchangable values use const method
# let account_email = "omair@git.com" // let is the new way for initializing the variable and its bugs free
# var account_password = "111111"     // var is the old way for initializing  variables. it has some issues with the like scoping the variables (scope is {} ) so developer decides to use let method
# account_city = "peshawar"   // javascript can also initialize variables without adding the var/let before but we don't prefer it.

// Updating Above variables 
# accountId = "1111"    // This is not allowed because account_Id is a CONST variable
# account_password = "23234" //This is Ok because this is Not a CONST variable

# DATATYPES AND ECMA
# "Use strict"; // This Allows the compiler to treat all the javaScript code as a newer version
# ECMA is a website for writting a standerd of codes it gives us the rules to follow that

# OBJECT

# console.log(typeof loggin); // Typeof is used for to find a type of the variable
//null is a object // undefine is a undefine typeof





<!-- Day 3 -->




######################################### CONVERSION & OPERATIONS ###############################################

######################################### CONVERSION ###############################################

// WHEN  WE WANT TO CONVERT ONE VARIABLE OPERATION INTO ANOTHER

# let SInNumber = Number(Stringscore);
// IF WE WANT ANOTHER TYPE FOR CONVERSION INTEAD OF NUMBER WE NEED TO TYPE ITS NAME JUST LIKE STRING(SCORE) BOOLEAN(SCRORE) ETC

// THERE ARE SOME ISSUES WITH JS IN TYPE CHECKING IT WILL CONVERT ANYTHING IN NUMBERS BUT THE RESULT WILL BE INCURRECT

// OUTPUT
console.table([VarInNumber,SInNumber,BInNumber]);

//
THE OUTPUT FOR SCORE AFTER CONVERSION IS 33
THE OUTPUT FOR STRINGSCORE AFTER CONVERSION IS NaN
THE OUTPUT FOR BOOLSCORE AFTER CONVERSION IS 1

FOR BOOLEAN CONVERSION IF WE CONVERT THEN 1 = TRUE / 0 = FALSE // EMPTY STRING = FALSE, VALUABLE STRING = TRUE 
//

######################################### OPERATIONS ###############################################

# let value = 2
  let negitiveValue = -value

// console.log(negitiveValue);


                        // Basic
// console.log(2+2);
// console.log(2-2);
// console.log(2*2);
// console.log(2**2); //2 power 2
// console.log(2/2);
// console.log(2%2);
// let string3 = str1 + str2    // Output  (STR1 Value STR2 value)

console.log("2" + 2);           // 22
console.log(2 + "2");           // 22
console.log(2 + 2 + "2");       // 42
console.log("2" + 2 + 2);       // 222
console.log("2" + (2 + 2));     //  24    // () IT WILL FIRST adding the inside the brackets value

// PROTIP 
USE parenthesis FOR NOT A MESSY NOT


// console.log(+TRUE)       OUTPUT 1
// console.log(+"")         OUTPUT 0


num1 = num2 = num3 = 2 + 2          // it will add 2+2 TO NUM1 NUM2 NUM3
 // prefix = ++gamecounter and postfix = gamecounter++


// ######################################### COMPARISON ###############################################

                    // BASIC

// console.log(2>1);
// console.log(2>3);

//                     // ADVANCE
//  console.log("2" > 2);     // false
//  console.log("2" < 2);     // false
//  console.log("2" == 2);    // true

//  console.log(null > 0);                  //these are the confusion conversions avoid this as you can 
//  console.log(null == 0);     
//  console.log(null >= 0);     // confusion is here      null is not greater or equals to 0 but last statment give true output   


//  console.log(undefined > 0);
//  console.log(undefined< 0);
//  console.log(undefined == 0);             // every answer is false


# //strick check (===)                these === check will also check the type is same or not if not then it will give an error
// console.log("2" === 2);         // Answer will be false




<!-- Day 4 -->



<!-- Day 5 -->